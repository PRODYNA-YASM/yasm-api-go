openapi: 3.0.0
info:
  description: This is an example of using OAuth2 Implicit Flow in a specification
    to describe security to your API.
  title: YASM (Yet Another Skill Management) API
  version: 0.8.5
servers:
- url: /api/v1
security:
- bearerAuth:
  - user
  - admin
paths:
  /ping:
    get:
      description: This operation shows how to override the global security defined
        above, as we want to open it up for all users.
      operationId: getPing
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security: []
      summary: Server heartbeat operation
      tags:
      - Status
  /version:
    get:
      description: This operation shows how to override the global security defined
        above, as we want to open it up for all users.
      operationId: getVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security: []
      summary: Information about the server
      tags:
      - Status
  /organizations:
    get:
      operationId: getOrganizations
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedOrganizations'
          description: A paged array of Organizations
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all Organizations
      tags:
      - Organization
    post:
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        description: Details about the Organization
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security:
      - implicit: []
      summary: Create an Organization
      tags:
      - Organization
  /organizations/{organizationId}:
    delete:
      operationId: deleteOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security:
      - implicit: []
      summary: Delete an organization
      tags:
      - Organization
    get:
      operationId: getOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about an Organization
      tags:
      - Organization
    put:
      operationId: updateOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        description: Details about the organization
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security:
      - implicit: []
      summary: Update an Organization
      tags:
      - Organization
  /organizations/{organizationId}/industries/{industryId}:
    delete:
      operationId: detachOrganizationFromIndustry
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: industryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Organization to an Industry
      tags:
      - Organization
      - Industry
    post:
      operationId: attachOrganizationToIndustry
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: industryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add an Organization to an Industry
      tags:
      - Organization
      - Industry
  /organizations/{organizationId}/offices:
    post:
      operationId: createOffice
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create an Office in an Organization
      tags:
      - Organization
      - Office
  /organizations/{organizationId}/offices/{officeId}:
    delete:
      operationId: deleteOffice
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: officeId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delte an Office from an Organization
      tags:
      - Organization
      - Office
    get:
      operationId: getOffice
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: officeId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get an Office for an Organiaztion
      tags:
      - Organization
      - Office
    put:
      operationId: updateOffice
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: officeId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update an Office for an Organization
      tags:
      - Organization
      - Office
  /industries:
    get:
      operationId: getIndustries
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedIndustries'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get all Industries
      tags:
      - Industry
    post:
      operationId: createIndustry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Industry'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Industry'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create an Industry
      tags:
      - Industry
  /industries/{industryId}:
    delete:
      operationId: deleteIndustry
      parameters:
      - explode: false
        in: path
        name: industryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete an Industry
      tags:
      - Industry
    get:
      operationId: getIndustry
      parameters:
      - explode: false
        in: path
        name: industryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Industry'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about an Industry
      tags:
      - Industry
    put:
      operationId: updateIndustry
      parameters:
      - explode: false
        in: path
        name: industryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Industry'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Industry'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update an Industry
      tags:
      - Industry
  /organizations/{organizationId}/certifications:
    get:
      operationId: getCertificationsForOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCertifications'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all certifications for a organization
      tags:
      - Organization
      - Certification
    post:
      operationId: createCertification
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a Certification in an Organization
      tags:
      - Organization
      - Certification
  /organizations/{organizationId}/projects:
    get:
      operationId: getOrganizationProjects
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedProjects'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all Projects for an Organization
      tags:
      - Organization
      - Project
    post:
      operationId: createProject
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a Project in an Organization
      tags:
      - Organization
      - Project
  /certifications:
    get:
      operationId: getCertifications
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCertifications'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all Certifations indepdenant of the Organization
      tags:
      - Certification
  /certifications/{certificationId}:
    delete:
      operationId: deleteCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a Certification
      tags:
      - Certification
    get:
      operationId: getCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about a Certification
      tags:
      - Certification
    put:
      operationId: updateCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Certification
      tags:
      - Certification
  /certifications/{certificationId}/skills/{skillId}:
    delete:
      operationId: deleteSkillFromCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
      - Certification
      - Skill
    post:
      description: Add Skill to Certification
      operationId: addSkillToCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
      - Certification
      - Skill
    put:
      description: Update Skill in Certification
      operationId: updateSkillInCertification
      parameters:
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      tags:
      - Certification
      - Skill
  /projects:
    get:
      operationId: getProjects
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - explode: true
        in: query
        name: projectIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: skillIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: personIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: industryIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedProjects'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all Projects in all Organizations
      tags:
      - Project
  /projects/{projectId}:
    delete:
      operationId: deleteProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a project
      tags:
      - Project
    get:
      operationId: getProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about a Project
      tags:
      - Project
    put:
      operationId: updateProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Project
      tags:
      - Project
  /skills:
    get:
      operationId: getSkills
      parameters:
      - description: Gives you either all skills, only the root kills or those which
          are defining kinds
        explode: true
        in: query
        name: types
        required: false
        schema:
          default: all
          enum:
          - all
          - root
          - kind
          type: string
        style: form
      - description: Optionally filter skills based on suggestion
        explode: true
        in: query
        name: suggestions
        required: false
        schema:
          default: all
          enum:
          - all
          - suggested
          - notsuggested
          type: string
        style: form
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedSkills'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all skills, optionally only root, optionally only kinds
      tags:
      - Skill
    post:
      operationId: createSkill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a Skill
      tags:
      - Skill
  /skills/{skillId}:
    delete:
      operationId: deleteSkill
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a Skill
      tags:
      - Skill
    get:
      operationId: getSkill
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details for a single skill
      tags:
      - Skill
    put:
      operationId: updateSkill
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Skill
      tags:
      - Skill
  /skills/{skillId}/parents:
    get:
      operationId: getSkillParents
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedSkills'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get ghe list of parents for a skill
      tags:
      - Skill
  /skills/{skillId}/parents/{parentSkillId}:
    delete:
      operationId: removeSkillFromParentSkill
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: parentSkillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Detaches a Skill from parent Skill, return the parent Skill
      tags:
      - Skill
    post:
      operationId: addSkillToParentSkill
      parameters:
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: parentSkillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Attach a Skill to a parent Skill, returns the parent Skill
      tags:
      - Skill
  /persons:
    get:
      operationId: getPersons
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - explode: true
        in: query
        name: personIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: skillIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: projectIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: organizationIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: industryIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: certificationIds
        required: false
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPersons'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all persons
      tags:
      - Person
    post:
      operationId: createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a new Person
      tags:
      - Person
  /persons/{personId}:
    delete:
      operationId: deletePerson
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete an existing Person
      tags:
      - Person
    get:
      operationId: getPerson
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get basic info about a person
      tags:
      - Person
    put:
      operationId: updatePerson
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update an existing Person
      tags:
      - Person
  /persons/{personid}/profile:
    get:
      operationId: generatePersonProfile
      parameters:
      - explode: false
        in: path
        name: personid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: A PDF profile of a Person
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Generate a PDF profile from a Person
      tags:
      - Person
  /persons/{personId}/interests/skills/{skillId}:
    delete:
      operationId: deletePersonInterest
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Interest to a Person
      tags:
      - Person
      - Skill
    post:
      operationId: addPersonInterest
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add an Interest to a Person
      tags:
      - Person
      - Skill
  /persons/{personId}/experiences:
    delete:
      operationId: deletePersonSkillExperiences
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
        description: A list of skillIds
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Skill Experience to a Person
      tags:
      - Person
      - Skill
    post:
      operationId: addPersonSkillExperiences
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/SkillLevelUpdate'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add an Skill experience to a Person (bulk)
      tags:
      - Person
      - Skill
    put:
      operationId: updatePersonSkillExperiences
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/SkillLevelUpdate'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Edit an Skill experience to a Person
      tags:
      - Person
      - Skill
  /persons/{personId}/experiences/skills/{skillId}:
    delete:
      operationId: deletePersonSkillExperience
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Skill Experience to a Person
      tags:
      - Person
      - Skill
    post:
      operationId: addPersonSkillExperience
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add an Skill experience to a Person
      tags:
      - Person
      - Skill
    put:
      operationId: updatePersonSkillExperience
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Edit an Skill experience to a Person
      tags:
      - Person
      - Skill
  /persons/{personId}/certifications/{certificationId}:
    delete:
      operationId: deletePersonCertification
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Interest to a Person
      tags:
      - Person
      - Certification
    post:
      operationId: addPersonCertification
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add Certification to a Person
      tags:
      - Person
      - Certification
    put:
      operationId: updatePersonCertification
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: certificationId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Certification of a Person
      tags:
      - Person
      - Certification
  /persons/{personId}/offices/{officeId}:
    delete:
      operationId: deletePersonOffice
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: officeId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete the office from a Person
      tags:
      - Person
      - Office
    post:
      operationId: addPersonOffice
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: officeId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Assing a person to an office
      tags:
      - Person
      - Office
  /persons/{personId}/projects/{projectId}:
    delete:
      operationId: deletePersonProject
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove an Project from a Person
      tags:
      - Person
      - Project
    post:
      operationId: addPersonProject
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectParticipationUpdate'
        description: List of Skills with level and timeframe
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add Project to a Person
      tags:
      - Person
      - Project
    put:
      operationId: updatePersonProject
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectParticipationUpdate'
        description: A time frame and a list of Skills
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Project of a Person
      tags:
      - Person
      - Project
  /persons/{personId}/projects/{projectId}/skills/{skillId}:
    delete:
      operationId: deletePersonProjectSkill
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove a Skill from a Project participation
      tags:
      - Person
      - Project
      - Skill
    post:
      operationId: addPersonProjectSkill
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        description: The Skill Level
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Add Skill to a Project participation
      tags:
      - Person
      - Project
      - Skill
    put:
      operationId: updatePersonProjectSkill
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
        description: The Skill Level
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update the level of a Skill in a Project participation
      tags:
      - Person
      - Project
      - Skill
  /persons/{personId}/projects/{projectId}/skills/{skillId}/confirmation/{confirmingPersonId}:
    delete:
      operationId: deleteConfirmation
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: confirmingPersonId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Remove a confirmation
      tags:
      - Person
      - Project
      - Skill
    post:
      operationId: confirmSkill
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: skillId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: confirmingPersonId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Confirm Skill
      tags:
      - Person
      - Project
      - Skill
  /persons/{personId}/availabilities:
    get:
      operationId: getAvailabilities
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAvailabilities'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all activities for a person
      tags:
      - Person
      - Availability
    post:
      operationId: createAvailability
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Availability'
        description: The availability
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityDetail'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a availability for a person
      tags:
      - Person
      - Availability
  /persons/{personId}/availabilities/calculated:
    get:
      operationId: getAvailabilitiesCalculated
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: startDate
        required: true
        schema:
          format: date
          type: string
        style: form
      - explode: true
        in: query
        name: periodDays
        required: false
        schema:
          default: 7
          example: 7
          type: integer
        style: form
      - explode: true
        in: query
        name: numberOfPeriods
        required: false
        schema:
          default: 10
          example: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAvailabilities'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of all activities for a person for a given time persion,
        calculated on server side
      tags:
      - Person
      - Availability
  /persons/{personId}/availabilities/{availabilityId}:
    delete:
      operationId: deleteAvailability
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: availabilityId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a person availability
      tags:
      - Person
      - Availability
    put:
      operationId: updateAvailability
      parameters:
      - explode: false
        in: path
        name: personId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: availabilityId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Availability'
        description: The availability
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityDetail'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a person availability
      tags:
      - Person
      - Availability
  /search/all/{text}:
    get:
      operationId: searchAll
      parameters:
      - explode: false
        in: path
        name: text
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Fulltext search on all kinds of objects
      tags:
      - Search
  /languages:
    get:
      operationId: getLanguages
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedLanguages'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get a list of Languages
      tags:
      - Language
    post:
      operationId: createLanguage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a new language
      tags:
      - Language
  /languages/{languageId}:
    delete:
      operationId: deleteLanguage
      parameters:
      - explode: false
        in: path
        name: languageId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a language
      tags:
      - Language
    get:
      operationId: getLanguage
      parameters:
      - explode: false
        in: path
        name: languageId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about a language
      tags:
      - Language
  /countries:
    get:
      operationId: getCountries
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedCountries'
          description: OK
      summary: Get all Countries
      tags:
      - Country
    post:
      operationId: createCountry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Create a new Country
      tags:
      - Country
  /countries/{countryId}:
    delete:
      operationId: deleteCountry
      parameters:
      - explode: false
        in: path
        name: countryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Delete a Country
      tags:
      - Country
    get:
      operationId: getCountry
      parameters:
      - explode: false
        in: path
        name: countryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Get details about a Country
      tags:
      - Country
    put:
      operationId: updateCountry
      parameters:
      - explode: false
        in: path
        name: countryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Update a Country
      tags:
      - Country
  /countries/{countryId}/languages/{languageId}:
    delete:
      operationId: removeLanguageFromCountry
      parameters:
      - explode: false
        in: path
        name: countryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: languageId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Assign a language to a country
      tags:
      - Language
      - Country
    post:
      operationId: addLanguageToCountry
      parameters:
      - explode: false
        in: path
        name: countryId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - explode: false
        in: path
        name: languageId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetails'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      summary: Assign a language to a country
      tags:
      - Language
      - Country
components:
  schemas:
    Version:
      example:
        serverVersion: 0.0.0
        apiVersion: 0.0.0
      properties:
        apiVersion:
          example: 0.0.0
          type: string
        serverVersion:
          example: 0.0.0
          type: string
      required:
      - apiVersion
      - serverVersion
      type: object
    DateModel:
      format: date
      type: string
    BasicDomainModel:
      properties:
        id:
          format: uuid
          type: string
      required:
      - id
      type: object
    NamedDomainModel:
      allOf:
      - $ref: '#/components/schemas/BasicDomainModel'
      - $ref: '#/components/schemas/NamedDomainModel_allOf'
      required:
      - name
      type: object
    Locateable:
      properties:
        location:
          example: Frankfurt, Germany
          type: string
        geolocation:
          $ref: '#/components/schemas/Geolocation'
      type: object
    Suggestable:
      properties:
        suggestion:
          default: false
          type: boolean
      required:
      - suggestion
      type: object
    Timeframed:
      properties:
        startdate:
          format: date
          type: string
        enddate:
          format: date
          type: string
      type: object
    Synonymable:
      properties:
        synonyms:
          items:
            type: string
          type: array
      type: object
    Certification:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Certification_allOf'
      type: object
    CertificationDetails:
      example:
        skills:
        - level:
            level: 1
        - level:
            level: 1
      properties:
        certification:
          $ref: '#/components/schemas/Certification'
        organization:
          $ref: '#/components/schemas/Organization'
        skills:
          items:
            $ref: '#/components/schemas/SkillLevel'
          type: array
      type: object
    Country:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      type: object
    CountryDetails:
      example:
        languages:
        - null
        - null
      properties:
        country:
          $ref: '#/components/schemas/Country'
        languages:
          items:
            $ref: '#/components/schemas/Language'
          type: array
      type: object
    Experience:
      allOf:
      - $ref: '#/components/schemas/Experience_allOf'
      type: object
    Geolocation:
      properties:
        longitude:
          type: number
        latitude:
          type: number
      required:
      - latitude
      - longitude
      type: object
    Industry:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      type: object
    Language:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - type: object
      type: object
    LanguageDetails:
      example:
        countries:
        - null
        - null
      properties:
        language:
          $ref: '#/components/schemas/Language'
        countries:
          items:
            $ref: '#/components/schemas/Country'
          type: array
      type: object
    LanguageLevel:
      example:
        level:
          level: 1
      properties:
        language:
          $ref: '#/components/schemas/Language'
        level:
          $ref: '#/components/schemas/Level'
      type: object
    Office:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Locateable'
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Locateable'
      - $ref: '#/components/schemas/Organization_allOf'
      type: object
    OrganizationDetails:
      example:
        projects:
        - null
        - null
        industries:
        - null
        - null
        offices:
        - null
        - null
        certifications:
        - null
        - null
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        projects:
          items:
            $ref: '#/components/schemas/Project'
          readOnly: true
          type: array
        industries:
          items:
            $ref: '#/components/schemas/Industry'
          type: array
        certifications:
          items:
            $ref: '#/components/schemas/Certification'
          type: array
        offices:
          items:
            $ref: '#/components/schemas/Office'
          type: array
      type: object
    Person:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Locateable'
      - $ref: '#/components/schemas/Person_allOf'
      required:
      - id
      - name
      type: object
    PersonDetails:
      example:
        projects:
        - null
        - null
        languages:
        - level:
            level: 1
        - level:
            level: 1
        interests:
        - null
        - null
        certifications:
        - skills:
          - level:
              level: 1
          - level:
              level: 1
        - skills:
          - level:
              level: 1
          - level:
              level: 1
        experiences:
        - null
        - null
      properties:
        person:
          $ref: '#/components/schemas/Person'
        projects:
          items:
            $ref: '#/components/schemas/ProjectParticipation'
          type: array
        experiences:
          items:
            $ref: '#/components/schemas/Experience'
          type: array
        interests:
          items:
            $ref: '#/components/schemas/Skill'
          type: array
        certifications:
          items:
            $ref: '#/components/schemas/CertificationDetails'
          type: array
        languages:
          items:
            $ref: '#/components/schemas/LanguageLevel'
          type: array
        office:
          $ref: '#/components/schemas/Office'
      type: object
    Availability:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Timeframed'
      - $ref: '#/components/schemas/Availability_allOf'
      required:
      - enddate
      - id
      - name
      - plannedHours
      - startdate
      - workHours
      type: object
    AvailabilityDetail:
      example:
        percent: 8.008281904610115
      properties:
        availability:
          $ref: '#/components/schemas/Availability'
        percent:
          format: integer
          maximum: 100
          minimum: 0
          type: number
      type: object
    Project:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Locateable'
      - $ref: '#/components/schemas/Project_allOf'
      type: object
    ProjectDetails:
      example:
        persons:
        - null
        - null
      properties:
        project:
          $ref: '#/components/schemas/Project'
        organization:
          $ref: '#/components/schemas/Organization'
        persons:
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    ProjectScoreDetail:
      allOf:
      - $ref: '#/components/schemas/ProjectDetails'
      - $ref: '#/components/schemas/ProjectScoreDetail_allOf'
      type: object
    ProjectParticipation:
      allOf:
      - $ref: '#/components/schemas/BasicDomainModel'
      - $ref: '#/components/schemas/ProjectParticipation_allOf'
      type: object
    ProjectParticipationUpdate:
      example:
        skills:
        - null
        - null
        timeframe: '{}'
        personalDescription: personalDescription
        descriptionOverwrite: descriptionOverwrite
      properties:
        timeframe:
          allOf:
          - $ref: '#/components/schemas/Timeframed'
          type: object
        skills:
          items:
            $ref: '#/components/schemas/SkillLevelUpdate'
          type: array
        descriptionOverwrite:
          type: string
        personalDescription:
          type: string
      type: object
    Skill:
      allOf:
      - $ref: '#/components/schemas/NamedDomainModel'
      - $ref: '#/components/schemas/Suggestable'
      - $ref: '#/components/schemas/Synonymable'
      - $ref: '#/components/schemas/Skill_allOf'
      type: object
    SkillLevel:
      example:
        level:
          level: 1
      properties:
        skill:
          $ref: '#/components/schemas/Skill'
        level:
          $ref: '#/components/schemas/Level'
      type: object
    SkillLevelUpdate:
      allOf:
      - $ref: '#/components/schemas/SkillLevelUpdate_allOf'
    SkillDetails:
      example:
        children:
        - null
        - null
        kinds:
        - null
        - null
      properties:
        skill:
          $ref: '#/components/schemas/Skill'
        children:
          items:
            $ref: '#/components/schemas/Skill'
          type: array
        kinds:
          items:
            $ref: '#/components/schemas/Skill'
          type: array
      type: object
    Status:
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    Error:
      properties:
        message:
          type: string
      type: object
    Level:
      example:
        level: 1
      properties:
        level:
          maximum: 5
          minimum: 1
          type: integer
      type: object
    Page:
      properties:
        skip:
          minimum: 0
          type: integer
        limit:
          minimum: 1
          type: integer
        count:
          type: integer
      type: object
    PagedAvailabilities:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedAvailabilities_allOf'
      type: object
    PagedOrganizations:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedOrganizations_allOf'
      type: object
    PagedLanguages:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedLanguages_allOf'
      type: object
    PagedCertifications:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedCertifications_allOf'
      type: object
    PagedCountries:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedCountries_allOf'
      type: object
    PagedSkills:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedSkills_allOf'
      type: object
    PagedIndustries:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedIndustries_allOf'
      type: object
    PagedProjects:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedProjects_allOf'
      type: object
    PagedPersons:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/PagedPersons_allOf'
      type: object
    PersonScoreDetail:
      allOf:
      - $ref: '#/components/schemas/PersonDetails'
      - $ref: '#/components/schemas/ProjectScoreDetail_allOf'
      type: object
    SearchResult:
      allOf:
      - $ref: '#/components/schemas/Page'
      - $ref: '#/components/schemas/SearchResult_allOf'
      type: object
    SearchResultItem:
      properties:
        score:
          example: 0.7
          type: number
        type:
          example: Certification
          type: string
        item:
          $ref: '#/components/schemas/NamedDomainModel'
      type: object
    NamedDomainModel_allOf:
      properties:
        name:
          example: This is the name
          type: string
      type: object
    Certification_allOf:
      properties:
        validity:
          type: string
      type: object
    Experience_allOf:
      properties:
        skill:
          $ref: '#/components/schemas/SkillLevel'
        confirmedBy:
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    Organization_allOf:
      properties:
        partner:
          default: false
          type: boolean
        customer:
          default: false
          type: boolean
      type: object
    Person_allOf:
      properties:
        employeeId:
          example: "1234567"
          type: string
        jobTitle:
          example: Software Engineer
          type: string
        company:
          example: PRODYNA SE
          type: string
        department:
          example: Professional Services
          type: string
        mail:
          example: peter.mueller@prodyna.com
          type: string
        mobilePhone:
          example: +49 176 12345678
          type: string
        picture:
          description: base64 encoded image
          type: string
        inactive:
          default: false
          description: Marks persons not working for the company anymore
          type: boolean
      type: object
    Availability_allOf:
      properties:
        workHours:
          example: 38.5
          format: float
          type: number
        plannedHours:
          example: 22.5
          format: float
          type: number
      type: object
    Project_allOf:
      properties:
        description:
          example: Recreate the entire world.
          type: string
        timeframe:
          $ref: '#/components/schemas/Timeframed'
      type: object
    ProjectScoreDetail_allOf:
      properties:
        score:
          type: number
      type: object
    ProjectParticipation_allOf:
      properties:
        timeframe:
          allOf:
          - $ref: '#/components/schemas/Timeframed'
          type: object
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          readOnly: true
          type: object
        descriptionOverwrite:
          example: Responsible Soluation Architect for this project.
          type: string
        personalDescription:
          type: string
        experiences:
          items:
            $ref: '#/components/schemas/Experience'
          readOnly: true
          type: array
      required:
      - experiences
      - id
      - project
      type: object
    Skill_allOf:
      properties:
        invest:
          default: false
          type: boolean
        kindgiver:
          default: false
          type: boolean
      required:
      - id
      - name
      type: object
    SkillLevelUpdate_allOf:
      properties:
        skillId:
          format: uuid
          type: string
        level:
          $ref: '#/components/schemas/Level'
      type: object
    PagedAvailabilities_allOf:
      properties:
        availabilities:
          items:
            $ref: '#/components/schemas/AvailabilityDetail'
          type: array
      type: object
    PagedOrganizations_allOf:
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
    PagedLanguages_allOf:
      properties:
        languages:
          items:
            $ref: '#/components/schemas/Language'
          type: array
      type: object
    PagedCertifications_allOf:
      properties:
        certifications:
          items:
            $ref: '#/components/schemas/Certification'
          type: array
      type: object
    PagedCountries_allOf:
      properties:
        countries:
          items:
            $ref: '#/components/schemas/Country'
          type: array
      type: object
    PagedSkills_allOf:
      properties:
        skills:
          items:
            $ref: '#/components/schemas/Skill'
          type: array
      type: object
    PagedIndustries_allOf:
      properties:
        industries:
          items:
            $ref: '#/components/schemas/Industry'
          type: array
      type: object
    PagedProjects_allOf:
      properties:
        projects:
          items:
            $ref: '#/components/schemas/ProjectScoreDetail'
          type: array
      type: object
    PagedPersons_allOf:
      properties:
        persons:
          items:
            allOf:
            - $ref: '#/components/schemas/PersonScoreDetail'
          type: array
      type: object
    SearchResult_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SearchResultItem'
          type: array
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
