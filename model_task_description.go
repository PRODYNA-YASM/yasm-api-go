/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.74.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the TaskDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDescription{}

// TaskDescription struct for TaskDescription
type TaskDescription struct {
	TaskDescription *string `json:"taskDescription,omitempty"`
	TaskType *AvailabilityType `json:"taskType,omitempty"`
}

// NewTaskDescription instantiates a new TaskDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDescription() *TaskDescription {
	this := TaskDescription{}
	return &this
}

// NewTaskDescriptionWithDefaults instantiates a new TaskDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDescriptionWithDefaults() *TaskDescription {
	this := TaskDescription{}
	return &this
}

// GetTaskDescription returns the TaskDescription field value if set, zero value otherwise.
func (o *TaskDescription) GetTaskDescription() string {
	if o == nil || IsNil(o.TaskDescription) {
		var ret string
		return ret
	}
	return *o.TaskDescription
}

// GetTaskDescriptionOk returns a tuple with the TaskDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDescription) GetTaskDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TaskDescription) {
		return nil, false
	}
	return o.TaskDescription, true
}

// HasTaskDescription returns a boolean if a field has been set.
func (o *TaskDescription) HasTaskDescription() bool {
	if o != nil && !IsNil(o.TaskDescription) {
		return true
	}

	return false
}

// SetTaskDescription gets a reference to the given string and assigns it to the TaskDescription field.
func (o *TaskDescription) SetTaskDescription(v string) {
	o.TaskDescription = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *TaskDescription) GetTaskType() AvailabilityType {
	if o == nil || IsNil(o.TaskType) {
		var ret AvailabilityType
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskDescription) GetTaskTypeOk() (*AvailabilityType, bool) {
	if o == nil || IsNil(o.TaskType) {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *TaskDescription) HasTaskType() bool {
	if o != nil && !IsNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given AvailabilityType and assigns it to the TaskType field.
func (o *TaskDescription) SetTaskType(v AvailabilityType) {
	o.TaskType = &v
}

func (o TaskDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskDescription) {
		toSerialize["taskDescription"] = o.TaskDescription
	}
	if !IsNil(o.TaskType) {
		toSerialize["taskType"] = o.TaskType
	}
	return toSerialize, nil
}

type NullableTaskDescription struct {
	value *TaskDescription
	isSet bool
}

func (v NullableTaskDescription) Get() *TaskDescription {
	return v.value
}

func (v *NullableTaskDescription) Set(val *TaskDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDescription(val *TaskDescription) *NullableTaskDescription {
	return &NullableTaskDescription{value: val, isSet: true}
}

func (v NullableTaskDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


