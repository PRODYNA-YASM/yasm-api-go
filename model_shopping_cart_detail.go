/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.68.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ShoppingCartDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShoppingCartDetail{}

// ShoppingCartDetail struct for ShoppingCartDetail
type ShoppingCartDetail struct {
	ShoppingCart *ShoppingCart `json:"shoppingCart,omitempty"`
	Audit *Audit `json:"audit,omitempty"`
	Owner *Person `json:"owner,omitempty"`
	SharedWith []Person `json:"sharedWith,omitempty"`
	Persons []Person `json:"persons,omitempty"`
}

// NewShoppingCartDetail instantiates a new ShoppingCartDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShoppingCartDetail() *ShoppingCartDetail {
	this := ShoppingCartDetail{}
	return &this
}

// NewShoppingCartDetailWithDefaults instantiates a new ShoppingCartDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShoppingCartDetailWithDefaults() *ShoppingCartDetail {
	this := ShoppingCartDetail{}
	return &this
}

// GetShoppingCart returns the ShoppingCart field value if set, zero value otherwise.
func (o *ShoppingCartDetail) GetShoppingCart() ShoppingCart {
	if o == nil || IsNil(o.ShoppingCart) {
		var ret ShoppingCart
		return ret
	}
	return *o.ShoppingCart
}

// GetShoppingCartOk returns a tuple with the ShoppingCart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShoppingCartDetail) GetShoppingCartOk() (*ShoppingCart, bool) {
	if o == nil || IsNil(o.ShoppingCart) {
		return nil, false
	}
	return o.ShoppingCart, true
}

// HasShoppingCart returns a boolean if a field has been set.
func (o *ShoppingCartDetail) HasShoppingCart() bool {
	if o != nil && !IsNil(o.ShoppingCart) {
		return true
	}

	return false
}

// SetShoppingCart gets a reference to the given ShoppingCart and assigns it to the ShoppingCart field.
func (o *ShoppingCartDetail) SetShoppingCart(v ShoppingCart) {
	o.ShoppingCart = &v
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *ShoppingCartDetail) GetAudit() Audit {
	if o == nil || IsNil(o.Audit) {
		var ret Audit
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShoppingCartDetail) GetAuditOk() (*Audit, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *ShoppingCartDetail) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given Audit and assigns it to the Audit field.
func (o *ShoppingCartDetail) SetAudit(v Audit) {
	o.Audit = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ShoppingCartDetail) GetOwner() Person {
	if o == nil || IsNil(o.Owner) {
		var ret Person
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShoppingCartDetail) GetOwnerOk() (*Person, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ShoppingCartDetail) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Person and assigns it to the Owner field.
func (o *ShoppingCartDetail) SetOwner(v Person) {
	o.Owner = &v
}

// GetSharedWith returns the SharedWith field value if set, zero value otherwise.
func (o *ShoppingCartDetail) GetSharedWith() []Person {
	if o == nil || IsNil(o.SharedWith) {
		var ret []Person
		return ret
	}
	return o.SharedWith
}

// GetSharedWithOk returns a tuple with the SharedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShoppingCartDetail) GetSharedWithOk() ([]Person, bool) {
	if o == nil || IsNil(o.SharedWith) {
		return nil, false
	}
	return o.SharedWith, true
}

// HasSharedWith returns a boolean if a field has been set.
func (o *ShoppingCartDetail) HasSharedWith() bool {
	if o != nil && !IsNil(o.SharedWith) {
		return true
	}

	return false
}

// SetSharedWith gets a reference to the given []Person and assigns it to the SharedWith field.
func (o *ShoppingCartDetail) SetSharedWith(v []Person) {
	o.SharedWith = v
}

// GetPersons returns the Persons field value if set, zero value otherwise.
func (o *ShoppingCartDetail) GetPersons() []Person {
	if o == nil || IsNil(o.Persons) {
		var ret []Person
		return ret
	}
	return o.Persons
}

// GetPersonsOk returns a tuple with the Persons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShoppingCartDetail) GetPersonsOk() ([]Person, bool) {
	if o == nil || IsNil(o.Persons) {
		return nil, false
	}
	return o.Persons, true
}

// HasPersons returns a boolean if a field has been set.
func (o *ShoppingCartDetail) HasPersons() bool {
	if o != nil && !IsNil(o.Persons) {
		return true
	}

	return false
}

// SetPersons gets a reference to the given []Person and assigns it to the Persons field.
func (o *ShoppingCartDetail) SetPersons(v []Person) {
	o.Persons = v
}

func (o ShoppingCartDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShoppingCartDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShoppingCart) {
		toSerialize["shoppingCart"] = o.ShoppingCart
	}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.SharedWith) {
		toSerialize["sharedWith"] = o.SharedWith
	}
	if !IsNil(o.Persons) {
		toSerialize["persons"] = o.Persons
	}
	return toSerialize, nil
}

type NullableShoppingCartDetail struct {
	value *ShoppingCartDetail
	isSet bool
}

func (v NullableShoppingCartDetail) Get() *ShoppingCartDetail {
	return v.value
}

func (v *NullableShoppingCartDetail) Set(val *ShoppingCartDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableShoppingCartDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableShoppingCartDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShoppingCartDetail(val *ShoppingCartDetail) *NullableShoppingCartDetail {
	return &NullableShoppingCartDetail{value: val, isSet: true}
}

func (v NullableShoppingCartDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShoppingCartDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


