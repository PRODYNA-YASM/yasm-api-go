/*
 * YASM (Yet Another Skill Management) API
 *
 * This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.
 *
 * API version: 0.5.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Date struct for Date
type Date struct {
	Date *string `json:"date,omitempty"`
}

// NewDate instantiates a new Date object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDate() *Date {
	this := Date{}
	return &this
}

// NewDateWithDefaults instantiates a new Date object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateWithDefaults() *Date {
	this := Date{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Date) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Date) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Date) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Date) SetDate(v string) {
	o.Date = &v
}

func (o Date) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableDate struct {
	value *Date
	isSet bool
}

func (v NullableDate) Get() *Date {
	return v.value
}

func (v *NullableDate) Set(val *Date) {
	v.value = val
	v.isSet = true
}

func (v NullableDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDate(val *Date) *NullableDate {
	return &NullableDate{value: val, isSet: true}
}

func (v NullableDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


