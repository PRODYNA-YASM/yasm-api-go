/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PersonProjectFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonProjectFilter{}

// PersonProjectFilter struct for PersonProjectFilter
type PersonProjectFilter struct {
	Id string `json:"id"`
	ObjectType *string `json:"objectType,omitempty"`
	ParticipationInMonth *MinMax `json:"participationInMonth,omitempty"`
	InvolvedOfficeIds []string `json:"involvedOfficeIds,omitempty"`
}

// NewPersonProjectFilter instantiates a new PersonProjectFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonProjectFilter(id string) *PersonProjectFilter {
	this := PersonProjectFilter{}
	this.Id = id
	return &this
}

// NewPersonProjectFilterWithDefaults instantiates a new PersonProjectFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonProjectFilterWithDefaults() *PersonProjectFilter {
	this := PersonProjectFilter{}
	return &this
}

// GetId returns the Id field value
func (o *PersonProjectFilter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PersonProjectFilter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PersonProjectFilter) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *PersonProjectFilter) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonProjectFilter) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *PersonProjectFilter) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *PersonProjectFilter) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetParticipationInMonth returns the ParticipationInMonth field value if set, zero value otherwise.
func (o *PersonProjectFilter) GetParticipationInMonth() MinMax {
	if o == nil || IsNil(o.ParticipationInMonth) {
		var ret MinMax
		return ret
	}
	return *o.ParticipationInMonth
}

// GetParticipationInMonthOk returns a tuple with the ParticipationInMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonProjectFilter) GetParticipationInMonthOk() (*MinMax, bool) {
	if o == nil || IsNil(o.ParticipationInMonth) {
		return nil, false
	}
	return o.ParticipationInMonth, true
}

// HasParticipationInMonth returns a boolean if a field has been set.
func (o *PersonProjectFilter) HasParticipationInMonth() bool {
	if o != nil && !IsNil(o.ParticipationInMonth) {
		return true
	}

	return false
}

// SetParticipationInMonth gets a reference to the given MinMax and assigns it to the ParticipationInMonth field.
func (o *PersonProjectFilter) SetParticipationInMonth(v MinMax) {
	o.ParticipationInMonth = &v
}

// GetInvolvedOfficeIds returns the InvolvedOfficeIds field value if set, zero value otherwise.
func (o *PersonProjectFilter) GetInvolvedOfficeIds() []string {
	if o == nil || IsNil(o.InvolvedOfficeIds) {
		var ret []string
		return ret
	}
	return o.InvolvedOfficeIds
}

// GetInvolvedOfficeIdsOk returns a tuple with the InvolvedOfficeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonProjectFilter) GetInvolvedOfficeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvolvedOfficeIds) {
		return nil, false
	}
	return o.InvolvedOfficeIds, true
}

// HasInvolvedOfficeIds returns a boolean if a field has been set.
func (o *PersonProjectFilter) HasInvolvedOfficeIds() bool {
	if o != nil && !IsNil(o.InvolvedOfficeIds) {
		return true
	}

	return false
}

// SetInvolvedOfficeIds gets a reference to the given []string and assigns it to the InvolvedOfficeIds field.
func (o *PersonProjectFilter) SetInvolvedOfficeIds(v []string) {
	o.InvolvedOfficeIds = v
}

func (o PersonProjectFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonProjectFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.ParticipationInMonth) {
		toSerialize["participationInMonth"] = o.ParticipationInMonth
	}
	if !IsNil(o.InvolvedOfficeIds) {
		toSerialize["involvedOfficeIds"] = o.InvolvedOfficeIds
	}
	return toSerialize, nil
}

type NullablePersonProjectFilter struct {
	value *PersonProjectFilter
	isSet bool
}

func (v NullablePersonProjectFilter) Get() *PersonProjectFilter {
	return v.value
}

func (v *NullablePersonProjectFilter) Set(val *PersonProjectFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonProjectFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonProjectFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonProjectFilter(val *PersonProjectFilter) *NullablePersonProjectFilter {
	return &NullablePersonProjectFilter{value: val, isSet: true}
}

func (v NullablePersonProjectFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonProjectFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


