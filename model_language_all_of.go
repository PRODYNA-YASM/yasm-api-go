/*
 * YASM (Yet Another Skill Management) API
 *
 * This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.
 *
 * API version: 0.0.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// LanguageAllOf struct for LanguageAllOf
type LanguageAllOf struct {
	Name interface{} `json:"name,omitempty"`
}

// NewLanguageAllOf instantiates a new LanguageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageAllOf() *LanguageAllOf {
	this := LanguageAllOf{}
	return &this
}

// NewLanguageAllOfWithDefaults instantiates a new LanguageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageAllOfWithDefaults() *LanguageAllOf {
	this := LanguageAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageAllOf) GetName() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageAllOf) GetNameOk() (*interface{}, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LanguageAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *LanguageAllOf) SetName(v interface{}) {
	o.Name = v
}

func (o LanguageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableLanguageAllOf struct {
	value *LanguageAllOf
	isSet bool
}

func (v NullableLanguageAllOf) Get() *LanguageAllOf {
	return v.value
}

func (v *NullableLanguageAllOf) Set(val *LanguageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageAllOf(val *LanguageAllOf) *NullableLanguageAllOf {
	return &NullableLanguageAllOf{value: val, isSet: true}
}

func (v NullableLanguageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


