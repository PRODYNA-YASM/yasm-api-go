/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.75.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// ProjectLayoutAPIService ProjectLayoutAPI service
type ProjectLayoutAPIService service

type ProjectLayoutAPICreateLayoutOverlayRequest struct {
	ctx context.Context
	ApiService *ProjectLayoutAPIService
	projectId string
	projectLayoutId string
	fieldId *string
	pngFile *os.File
}

func (r ProjectLayoutAPICreateLayoutOverlayRequest) FieldId(fieldId string) ProjectLayoutAPICreateLayoutOverlayRequest {
	r.fieldId = &fieldId
	return r
}

// png layout file
func (r ProjectLayoutAPICreateLayoutOverlayRequest) PngFile(pngFile *os.File) ProjectLayoutAPICreateLayoutOverlayRequest {
	r.pngFile = pngFile
	return r
}

func (r ProjectLayoutAPICreateLayoutOverlayRequest) Execute() (*ProjectLayoutDetails, *http.Response, error) {
	return r.ApiService.CreateLayoutOverlayExecute(r)
}

/*
CreateLayoutOverlay Create a Layout Overlay

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param projectLayoutId
 @return ProjectLayoutAPICreateLayoutOverlayRequest
*/
func (a *ProjectLayoutAPIService) CreateLayoutOverlay(ctx context.Context, projectId string, projectLayoutId string) ProjectLayoutAPICreateLayoutOverlayRequest {
	return ProjectLayoutAPICreateLayoutOverlayRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		projectLayoutId: projectLayoutId,
	}
}

// Execute executes the request
//  @return ProjectLayoutDetails
func (a *ProjectLayoutAPIService) CreateLayoutOverlayExecute(r ProjectLayoutAPICreateLayoutOverlayRequest) (*ProjectLayoutDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectLayoutDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectLayoutAPIService.CreateLayoutOverlay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{projectId}/layouts/{projectLayoutId}/overlay"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectLayoutId"+"}", url.PathEscape(parameterValueToString(r.projectLayoutId, "projectLayoutId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fieldId == nil {
		return localVarReturnValue, nil, reportError("fieldId is required and must be specified")
	}
	if r.pngFile == nil {
		return localVarReturnValue, nil, reportError("pngFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "fieldId", r.fieldId, "")
	var pngFileLocalVarFormFileName string
	var pngFileLocalVarFileName     string
	var pngFileLocalVarFileBytes    []byte

	pngFileLocalVarFormFileName = "pngFile"


	pngFileLocalVarFile := r.pngFile

	if pngFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(pngFileLocalVarFile)

		pngFileLocalVarFileBytes = fbs
		pngFileLocalVarFileName = pngFileLocalVarFile.Name()
		pngFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: pngFileLocalVarFileBytes, fileName: pngFileLocalVarFileName, formFileName: pngFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectLayoutAPICreateProjectLayoutRequest struct {
	ctx context.Context
	ApiService *ProjectLayoutAPIService
	projectId string
	layoutId *string
	projectLayout *ProjectLayout
}

// The ID of the layout to use for the image
func (r ProjectLayoutAPICreateProjectLayoutRequest) LayoutId(layoutId string) ProjectLayoutAPICreateProjectLayoutRequest {
	r.layoutId = &layoutId
	return r
}

func (r ProjectLayoutAPICreateProjectLayoutRequest) ProjectLayout(projectLayout ProjectLayout) ProjectLayoutAPICreateProjectLayoutRequest {
	r.projectLayout = &projectLayout
	return r
}

func (r ProjectLayoutAPICreateProjectLayoutRequest) Execute() (*ProjectLayoutDetails, *http.Response, error) {
	return r.ApiService.CreateProjectLayoutExecute(r)
}

/*
CreateProjectLayout Create a Project Layout

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @return ProjectLayoutAPICreateProjectLayoutRequest
*/
func (a *ProjectLayoutAPIService) CreateProjectLayout(ctx context.Context, projectId string) ProjectLayoutAPICreateProjectLayoutRequest {
	return ProjectLayoutAPICreateProjectLayoutRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ProjectLayoutDetails
func (a *ProjectLayoutAPIService) CreateProjectLayoutExecute(r ProjectLayoutAPICreateProjectLayoutRequest) (*ProjectLayoutDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectLayoutDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectLayoutAPIService.CreateProjectLayout")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{projectId}/layouts"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.layoutId == nil {
		return localVarReturnValue, nil, reportError("layoutId is required and must be specified")
	}
	if r.projectLayout == nil {
		return localVarReturnValue, nil, reportError("projectLayout is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "layoutId", r.layoutId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.projectLayout
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest struct {
	ctx context.Context
	ApiService *ProjectLayoutAPIService
	projectId string
	projectLayoutId string
	overlayId string
}

func (r ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteOverlayFromLayoutInProjectExecute(r)
}

/*
DeleteOverlayFromLayoutInProject Delete an overlay from a layout in a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param projectLayoutId
 @param overlayId
 @return ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest
*/
func (a *ProjectLayoutAPIService) DeleteOverlayFromLayoutInProject(ctx context.Context, projectId string, projectLayoutId string, overlayId string) ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest {
	return ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		projectLayoutId: projectLayoutId,
		overlayId: overlayId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProjectLayoutAPIService) DeleteOverlayFromLayoutInProjectExecute(r ProjectLayoutAPIDeleteOverlayFromLayoutInProjectRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectLayoutAPIService.DeleteOverlayFromLayoutInProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{projectId}/images/{projectLayoutId}/overlay/{overlayId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectLayoutId"+"}", url.PathEscape(parameterValueToString(r.projectLayoutId, "projectLayoutId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"overlayId"+"}", url.PathEscape(parameterValueToString(r.overlayId, "overlayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProjectLayoutAPIRenderOverlayToPngRequest struct {
	ctx context.Context
	ApiService *ProjectLayoutAPIService
	projectId string
	projectLayoutId string
}

func (r ProjectLayoutAPIRenderOverlayToPngRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.RenderOverlayToPngExecute(r)
}

/*
RenderOverlayToPng Render a Layout Overlay to png

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param projectLayoutId
 @return ProjectLayoutAPIRenderOverlayToPngRequest
*/
func (a *ProjectLayoutAPIService) RenderOverlayToPng(ctx context.Context, projectId string, projectLayoutId string) ProjectLayoutAPIRenderOverlayToPngRequest {
	return ProjectLayoutAPIRenderOverlayToPngRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		projectLayoutId: projectLayoutId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ProjectLayoutAPIService) RenderOverlayToPngExecute(r ProjectLayoutAPIRenderOverlayToPngRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectLayoutAPIService.RenderOverlayToPng")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{projectId}/layouts/{projectLayoutId}.png"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectLayoutId"+"}", url.PathEscape(parameterValueToString(r.projectLayoutId, "projectLayoutId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
