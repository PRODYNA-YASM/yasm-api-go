/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.76.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectLayoutDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectLayoutDetails{}

// ProjectLayoutDetails struct for ProjectLayoutDetails
type ProjectLayoutDetails struct {
	Audit *Audit `json:"audit,omitempty"`
	ProjectLayout *ProjectLayout `json:"projectLayout,omitempty"`
	LayoutId *string `json:"layoutId,omitempty"`
	Overlays []LayoutOverlay `json:"overlays,omitempty"`
}

// NewProjectLayoutDetails instantiates a new ProjectLayoutDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectLayoutDetails() *ProjectLayoutDetails {
	this := ProjectLayoutDetails{}
	return &this
}

// NewProjectLayoutDetailsWithDefaults instantiates a new ProjectLayoutDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectLayoutDetailsWithDefaults() *ProjectLayoutDetails {
	this := ProjectLayoutDetails{}
	return &this
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *ProjectLayoutDetails) GetAudit() Audit {
	if o == nil || IsNil(o.Audit) {
		var ret Audit
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectLayoutDetails) GetAuditOk() (*Audit, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *ProjectLayoutDetails) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given Audit and assigns it to the Audit field.
func (o *ProjectLayoutDetails) SetAudit(v Audit) {
	o.Audit = &v
}

// GetProjectLayout returns the ProjectLayout field value if set, zero value otherwise.
func (o *ProjectLayoutDetails) GetProjectLayout() ProjectLayout {
	if o == nil || IsNil(o.ProjectLayout) {
		var ret ProjectLayout
		return ret
	}
	return *o.ProjectLayout
}

// GetProjectLayoutOk returns a tuple with the ProjectLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectLayoutDetails) GetProjectLayoutOk() (*ProjectLayout, bool) {
	if o == nil || IsNil(o.ProjectLayout) {
		return nil, false
	}
	return o.ProjectLayout, true
}

// HasProjectLayout returns a boolean if a field has been set.
func (o *ProjectLayoutDetails) HasProjectLayout() bool {
	if o != nil && !IsNil(o.ProjectLayout) {
		return true
	}

	return false
}

// SetProjectLayout gets a reference to the given ProjectLayout and assigns it to the ProjectLayout field.
func (o *ProjectLayoutDetails) SetProjectLayout(v ProjectLayout) {
	o.ProjectLayout = &v
}

// GetLayoutId returns the LayoutId field value if set, zero value otherwise.
func (o *ProjectLayoutDetails) GetLayoutId() string {
	if o == nil || IsNil(o.LayoutId) {
		var ret string
		return ret
	}
	return *o.LayoutId
}

// GetLayoutIdOk returns a tuple with the LayoutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectLayoutDetails) GetLayoutIdOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutId) {
		return nil, false
	}
	return o.LayoutId, true
}

// HasLayoutId returns a boolean if a field has been set.
func (o *ProjectLayoutDetails) HasLayoutId() bool {
	if o != nil && !IsNil(o.LayoutId) {
		return true
	}

	return false
}

// SetLayoutId gets a reference to the given string and assigns it to the LayoutId field.
func (o *ProjectLayoutDetails) SetLayoutId(v string) {
	o.LayoutId = &v
}

// GetOverlays returns the Overlays field value if set, zero value otherwise.
func (o *ProjectLayoutDetails) GetOverlays() []LayoutOverlay {
	if o == nil || IsNil(o.Overlays) {
		var ret []LayoutOverlay
		return ret
	}
	return o.Overlays
}

// GetOverlaysOk returns a tuple with the Overlays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectLayoutDetails) GetOverlaysOk() ([]LayoutOverlay, bool) {
	if o == nil || IsNil(o.Overlays) {
		return nil, false
	}
	return o.Overlays, true
}

// HasOverlays returns a boolean if a field has been set.
func (o *ProjectLayoutDetails) HasOverlays() bool {
	if o != nil && !IsNil(o.Overlays) {
		return true
	}

	return false
}

// SetOverlays gets a reference to the given []LayoutOverlay and assigns it to the Overlays field.
func (o *ProjectLayoutDetails) SetOverlays(v []LayoutOverlay) {
	o.Overlays = v
}

func (o ProjectLayoutDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectLayoutDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	if !IsNil(o.ProjectLayout) {
		toSerialize["projectLayout"] = o.ProjectLayout
	}
	if !IsNil(o.LayoutId) {
		toSerialize["layoutId"] = o.LayoutId
	}
	if !IsNil(o.Overlays) {
		toSerialize["overlays"] = o.Overlays
	}
	return toSerialize, nil
}

type NullableProjectLayoutDetails struct {
	value *ProjectLayoutDetails
	isSet bool
}

func (v NullableProjectLayoutDetails) Get() *ProjectLayoutDetails {
	return v.value
}

func (v *NullableProjectLayoutDetails) Set(val *ProjectLayoutDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectLayoutDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectLayoutDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectLayoutDetails(val *ProjectLayoutDetails) *NullableProjectLayoutDetails {
	return &NullableProjectLayoutDetails{value: val, isSet: true}
}

func (v NullableProjectLayoutDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectLayoutDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


