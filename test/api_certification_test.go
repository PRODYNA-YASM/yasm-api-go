/*
YASM (Yet Another Skill Management) API

Testing CertificationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_CertificationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test CertificationApiService AddPersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.AddPersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService AddSkillToCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.CertificationApi.AddSkillToCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService CreateCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.CertificationApi.CreateCertification(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService DeleteCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.DeleteCertification(context.Background(), certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService DeletePersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.DeletePersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService DeleteSkillFromCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.CertificationApi.DeleteSkillFromCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService GetCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.GetCertification(context.Background(), certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService GetCertifications", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.CertificationApi.GetCertifications(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService GetCertificationsForOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.CertificationApi.GetCertificationsForOrganization(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService MoveCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var certificateId string

        resp, httpRes, err := apiClient.CertificationApi.MoveCertification(context.Background(), organizationId, certificateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService UpdateCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.UpdateCertification(context.Background(), certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService UpdatePersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.CertificationApi.UpdatePersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CertificationApiService UpdateSkillInCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.CertificationApi.UpdateSkillInCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
