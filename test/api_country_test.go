/*
YASM (Yet Another Skill Management) API

Testing CountryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_CountryApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test CountryApiService AddLanguageToCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string
        var languageId string

        resp, httpRes, err := apiClient.CountryApi.AddLanguageToCountry(context.Background(), countryId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService CreateCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.CountryApi.CreateCountry(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService DeleteCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string

        resp, httpRes, err := apiClient.CountryApi.DeleteCountry(context.Background(), countryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService GetCountries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.CountryApi.GetCountries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService GetCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string

        resp, httpRes, err := apiClient.CountryApi.GetCountry(context.Background(), countryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService RemoveLanguageFromCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string
        var languageId string

        resp, httpRes, err := apiClient.CountryApi.RemoveLanguageFromCountry(context.Background(), countryId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CountryApiService UpdateCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string

        resp, httpRes, err := apiClient.CountryApi.UpdateCountry(context.Background(), countryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
