/*
YASM (Yet Another Skill Management) API

Testing SkillApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_SkillApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SkillApiService AddPersonInterest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.AddPersonInterest(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService AddPersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.AddPersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService AddPersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.AddPersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService AddPersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.SkillApi.AddPersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService AddSkillToCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.AddSkillToCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService AddSkillToParentSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string
        var parentSkillId string

        resp, httpRes, err := apiClient.SkillApi.AddSkillToParentSkill(context.Background(), skillId, parentSkillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService ConfirmSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.SkillApi.ConfirmSkill(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService CreateSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SkillApi.CreateSkill(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeleteConfirmation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.SkillApi.DeleteConfirmation(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeletePersonInterest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.DeletePersonInterest(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeletePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.DeletePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeletePersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.DeletePersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeletePersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.SkillApi.DeletePersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeleteSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string

        resp, httpRes, err := apiClient.SkillApi.DeleteSkill(context.Background(), skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService DeleteSkillFromCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.DeleteSkillFromCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService GetSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string

        resp, httpRes, err := apiClient.SkillApi.GetSkill(context.Background(), skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService GetSkillParents", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string

        resp, httpRes, err := apiClient.SkillApi.GetSkillParents(context.Background(), skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService GetSkills", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SkillApi.GetSkills(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService MergeSkills", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string
        var otherSkillId string

        resp, httpRes, err := apiClient.SkillApi.MergeSkills(context.Background(), skillId, otherSkillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService RemoveSkillFromParentSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string
        var parentSkillId string

        resp, httpRes, err := apiClient.SkillApi.RemoveSkillFromParentSkill(context.Background(), skillId, parentSkillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService UpdatePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.UpdatePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService UpdatePersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.UpdatePersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService UpdatePersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.SkillApi.UpdatePersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService UpdateSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var skillId string

        resp, httpRes, err := apiClient.SkillApi.UpdateSkill(context.Background(), skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SkillApiService UpdateSkillInCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var certificationId string
        var skillId string

        resp, httpRes, err := apiClient.SkillApi.UpdateSkillInCertification(context.Background(), certificationId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
