/*
YASM (Yet Another Skill Management) API

Testing ProjectApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_ProjectApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ProjectApiService AddPersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.AddPersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService AddPersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.ProjectApi.AddPersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService ConfirmSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.ProjectApi.ConfirmSkill(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService CreateProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.ProjectApi.CreateProject(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService DeleteConfirmation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.ProjectApi.DeleteConfirmation(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService DeletePersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.DeletePersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService DeletePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.ProjectApi.DeletePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService DeleteProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.DeleteProject(context.Background(), projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService GetOrganizationProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.ProjectApi.GetOrganizationProjects(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService GetProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.GetProject(context.Background(), projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService MergeProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var projectId string
        var otherProjectId string

        resp, httpRes, err := apiClient.ProjectApi.MergeProjects(context.Background(), projectId, otherProjectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService ReadPersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.ReadPersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService SearchProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ProjectApi.SearchProjects(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService UpdatePersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.UpdatePersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService UpdatePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.ProjectApi.UpdatePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ProjectApiService UpdateProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var projectId string

        resp, httpRes, err := apiClient.ProjectApi.UpdateProject(context.Background(), projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
