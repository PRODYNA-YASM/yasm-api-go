/*
YASM (Yet Another Skill Management) API

Testing ShoppingCartAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/prodyna-yasm/yasm-api-go"
)

func Test_client_ShoppingCartAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ShoppingCartAPIService AddPersonToShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string
		var personId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.AddPersonToShoppingCart(context.Background(), shoppingCartId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService CreateShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ShoppingCartAPI.CreateShoppingCart(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService DeleteShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.DeleteShoppingCart(context.Background(), shoppingCartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService GetShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.GetShoppingCart(context.Background(), shoppingCartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService RemovePersonFromShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string
		var personId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.RemovePersonFromShoppingCart(context.Background(), shoppingCartId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService SearchProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ShoppingCartAPI.SearchProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService ShareShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string
		var personId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.ShareShoppingCart(context.Background(), shoppingCartId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService UnshareShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string
		var personId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.UnshareShoppingCart(context.Background(), shoppingCartId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShoppingCartAPIService UpdateShoppingCart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shoppingCartId string

		resp, httpRes, err := apiClient.ShoppingCartAPI.UpdateShoppingCart(context.Background(), shoppingCartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
