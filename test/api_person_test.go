/*
YASM (Yet Another Skill Management) API

Testing PersonApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_PersonApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PersonApiService AddPersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonInterest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonInterest(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var officeId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonOffice(context.Background(), personId, officeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService AddPersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.AddPersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService ConfirmSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.PersonApi.ConfirmSkill(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService CreateAvailability", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.CreateAvailability(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService CreatePerson", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PersonApi.CreatePerson(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeleteAvailability", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var availabilityId string

        resp, httpRes, err := apiClient.PersonApi.DeleteAvailability(context.Background(), personId, availabilityId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeleteConfirmation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string
        var confirmingPersonId string

        resp, httpRes, err := apiClient.PersonApi.DeleteConfirmation(context.Background(), personId, projectId, skillId, confirmingPersonId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePerson", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.DeletePerson(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonInterest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonInterest(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var officeId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonOffice(context.Background(), personId, officeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService DeletePersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.DeletePersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService GeneratePersonProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personid string

        resp, httpRes, err := apiClient.PersonApi.GeneratePersonProfile(context.Background(), personid).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService GetAvailabilities", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.GetAvailabilities(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService GetPerson", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.GetPerson(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService ReadPersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.PersonApi.ReadPersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService RemovePersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.PersonApi.RemovePersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService SearchPersons", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PersonApi.SearchPersons(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdateAvailability", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var availabilityId string

        resp, httpRes, err := apiClient.PersonApi.UpdateAvailability(context.Background(), personId, availabilityId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePerson", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePerson(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePersonCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var certificationId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePersonCertification(context.Background(), personId, certificationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePersonProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePersonProject(context.Background(), personId, projectId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePersonProjectSkill", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var projectId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePersonProjectSkill(context.Background(), personId, projectId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePersonSkillExperience", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var skillId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePersonSkillExperience(context.Background(), personId, skillId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UpdatePersonSkillExperiences", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string

        resp, httpRes, err := apiClient.PersonApi.UpdatePersonSkillExperiences(context.Background(), personId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PersonApiService UupdatePersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.PersonApi.UupdatePersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
