/*
YASM (Yet Another Skill Management) API

Testing OrganizationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_OrganizationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test OrganizationApiService AttachOrganizationToIndustry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var industryId string

        resp, httpRes, err := apiClient.OrganizationApi.AttachOrganizationToIndustry(context.Background(), organizationId, industryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService CreateCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.CreateCertification(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService CreateOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.CreateOffice(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService CreateOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OrganizationApi.CreateOrganization(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService CreateProject", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.CreateProject(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService DeleteOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var officeId string

        resp, httpRes, err := apiClient.OrganizationApi.DeleteOffice(context.Background(), organizationId, officeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService DeleteOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.DeleteOrganization(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService DetachOrganizationFromIndustry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var industryId string

        resp, httpRes, err := apiClient.OrganizationApi.DetachOrganizationFromIndustry(context.Background(), organizationId, industryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService GetCertificationsForOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.GetCertificationsForOrganization(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService GetOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var officeId string

        resp, httpRes, err := apiClient.OrganizationApi.GetOffice(context.Background(), organizationId, officeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService GetOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.GetOrganization(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService GetOrganizationProjects", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.GetOrganizationProjects(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService GetOrganizations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.OrganizationApi.GetOrganizations(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService MergeOrganizations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var otherOrganizationId string

        resp, httpRes, err := apiClient.OrganizationApi.MergeOrganizations(context.Background(), organizationId, otherOrganizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService MoveCertification", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var certificateId string

        resp, httpRes, err := apiClient.OrganizationApi.MoveCertification(context.Background(), organizationId, certificateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService UpdateOffice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string
        var officeId string

        resp, httpRes, err := apiClient.OrganizationApi.UpdateOffice(context.Background(), organizationId, officeId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test OrganizationApiService UpdateOrganization", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var organizationId string

        resp, httpRes, err := apiClient.OrganizationApi.UpdateOrganization(context.Background(), organizationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
