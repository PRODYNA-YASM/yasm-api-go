/*
YASM (Yet Another Skill Management) API

Testing AwardAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/prodyna-yasm/yasm-api-go"
)

func Test_client_AwardAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AwardAPIService AddPersonAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.AddPersonAward(context.Background(), personId, awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService CreateAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AwardAPI.CreateAward(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService DeleteAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.DeleteAward(context.Background(), awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService DeletePersonAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.DeletePersonAward(context.Background(), personId, awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService GetAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.GetAward(context.Background(), awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService MoveAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awardId string
		var organizationId string

		resp, httpRes, err := apiClient.AwardAPI.MoveAward(context.Background(), awardId, organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService SearchAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AwardAPI.SearchAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService UpdateAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.UpdateAward(context.Background(), awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AwardAPIService UpdatePersonAward", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var awardId string

		resp, httpRes, err := apiClient.AwardAPI.UpdatePersonAward(context.Background(), personId, awardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
