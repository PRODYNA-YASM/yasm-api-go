/*
YASM (Yet Another Skill Management) API

Testing LanguageApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_LanguageApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LanguageApiService AddLanguageToCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string
        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.AddLanguageToCountry(context.Background(), countryId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService AddPersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.AddPersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService CreateLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LanguageApi.CreateLanguage(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService DeleteLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.DeleteLanguage(context.Background(), languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService GetLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.GetLanguage(context.Background(), languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService GetLanguages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LanguageApi.GetLanguages(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService RemoveLanguageFromCountry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var countryId string
        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.RemoveLanguageFromCountry(context.Background(), countryId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService RemovePersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.RemovePersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LanguageApiService UupdatePersonLanguage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var personId string
        var languageId string

        resp, httpRes, err := apiClient.LanguageApi.UupdatePersonLanguage(context.Background(), personId, languageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
