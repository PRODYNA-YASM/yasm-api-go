/*
YASM (Yet Another Skill Management) API

Testing LanguageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/prodyna-yasm/yasm-api-go"
)

func Test_client_LanguageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LanguageAPIService AddLanguageToCountry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string
		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.AddLanguageToCountry(context.Background(), countryId, languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService AddPersonLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.AddPersonLanguage(context.Background(), personId, languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService CreateLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LanguageAPI.CreateLanguage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService DeleteLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.DeleteLanguage(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService GetLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.GetLanguage(context.Background(), languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService RemoveLanguageFromCountry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string
		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.RemoveLanguageFromCountry(context.Background(), countryId, languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService RemovePersonLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.RemovePersonLanguage(context.Background(), personId, languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService SearchLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LanguageAPI.SearchLanguages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LanguageAPIService UpdatePersonLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var languageId string

		resp, httpRes, err := apiClient.LanguageAPI.UpdatePersonLanguage(context.Background(), personId, languageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
