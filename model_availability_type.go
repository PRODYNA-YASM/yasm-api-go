/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.73.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AvailabilityType Type of the project from people planner
type AvailabilityType string

// List of AvailabilityType
const (
	ORDERED AvailabilityType = "ORDERED"
	OPPORTUNITY AvailabilityType = "OPPORTUNITY"
	INTERNAL_PROJECT AvailabilityType = "INTERNAL_PROJECT"
)

// All allowed values of AvailabilityType enum
var AllowedAvailabilityTypeEnumValues = []AvailabilityType{
	"ORDERED",
	"OPPORTUNITY",
	"INTERNAL_PROJECT",
}

func (v *AvailabilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityType(value)
	for _, existing := range AllowedAvailabilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityType", value)
}

// NewAvailabilityTypeFromValue returns a pointer to a valid AvailabilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityTypeFromValue(v string) (*AvailabilityType, error) {
	ev := AvailabilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityType: valid values are %v", v, AllowedAvailabilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityType) IsValid() bool {
	for _, existing := range AllowedAvailabilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityType value
func (v AvailabilityType) Ptr() *AvailabilityType {
	return &v
}

type NullableAvailabilityType struct {
	value *AvailabilityType
	isSet bool
}

func (v NullableAvailabilityType) Get() *AvailabilityType {
	return v.value
}

func (v *NullableAvailabilityType) Set(val *AvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityType(val *AvailabilityType) *NullableAvailabilityType {
	return &NullableAvailabilityType{value: val, isSet: true}
}

func (v NullableAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

