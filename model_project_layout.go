/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.76.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectLayout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectLayout{}

// ProjectLayout struct for ProjectLayout
type ProjectLayout struct {
	NamedDomainModel
}

// NewProjectLayout instantiates a new ProjectLayout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectLayout(id string, name string) *ProjectLayout {
	this := ProjectLayout{}
	this.Id = id
	this.Name = name
	return &this
}

// NewProjectLayoutWithDefaults instantiates a new ProjectLayout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectLayoutWithDefaults() *ProjectLayout {
	this := ProjectLayout{}
	return &this
}

func (o ProjectLayout) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectLayout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedNamedDomainModel, errNamedDomainModel := json.Marshal(o.NamedDomainModel)
	if errNamedDomainModel != nil {
		return map[string]interface{}{}, errNamedDomainModel
	}
	errNamedDomainModel = json.Unmarshal([]byte(serializedNamedDomainModel), &toSerialize)
	if errNamedDomainModel != nil {
		return map[string]interface{}{}, errNamedDomainModel
	}
	return toSerialize, nil
}

type NullableProjectLayout struct {
	value *ProjectLayout
	isSet bool
}

func (v NullableProjectLayout) Get() *ProjectLayout {
	return v.value
}

func (v *NullableProjectLayout) Set(val *ProjectLayout) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectLayout(val *ProjectLayout) *NullableProjectLayout {
	return &NullableProjectLayout{value: val, isSet: true}
}

func (v NullableProjectLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


