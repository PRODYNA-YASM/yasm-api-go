/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.76.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the LayoutOverlay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LayoutOverlay{}

// LayoutOverlay struct for LayoutOverlay
type LayoutOverlay struct {
	NamedDomainModel
	Field *LayoutField `json:"field,omitempty"`
}

// NewLayoutOverlay instantiates a new LayoutOverlay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayoutOverlay(id string, name string) *LayoutOverlay {
	this := LayoutOverlay{}
	this.Id = id
	this.Name = name
	return &this
}

// NewLayoutOverlayWithDefaults instantiates a new LayoutOverlay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayoutOverlayWithDefaults() *LayoutOverlay {
	this := LayoutOverlay{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *LayoutOverlay) GetField() LayoutField {
	if o == nil || IsNil(o.Field) {
		var ret LayoutField
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LayoutOverlay) GetFieldOk() (*LayoutField, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *LayoutOverlay) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given LayoutField and assigns it to the Field field.
func (o *LayoutOverlay) SetField(v LayoutField) {
	o.Field = &v
}

func (o LayoutOverlay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LayoutOverlay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedNamedDomainModel, errNamedDomainModel := json.Marshal(o.NamedDomainModel)
	if errNamedDomainModel != nil {
		return map[string]interface{}{}, errNamedDomainModel
	}
	errNamedDomainModel = json.Unmarshal([]byte(serializedNamedDomainModel), &toSerialize)
	if errNamedDomainModel != nil {
		return map[string]interface{}{}, errNamedDomainModel
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableLayoutOverlay struct {
	value *LayoutOverlay
	isSet bool
}

func (v NullableLayoutOverlay) Get() *LayoutOverlay {
	return v.value
}

func (v *NullableLayoutOverlay) Set(val *LayoutOverlay) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutOverlay) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutOverlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutOverlay(val *LayoutOverlay) *NullableLayoutOverlay {
	return &NullableLayoutOverlay{value: val, isSet: true}
}

func (v NullableLayoutOverlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutOverlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


