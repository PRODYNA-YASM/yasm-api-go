/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.53.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectImageDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectImageDetails{}

// ProjectImageDetails struct for ProjectImageDetails
type ProjectImageDetails struct {
	Audit *Audit `json:"audit,omitempty"`
	ProjectImage *ProjectImage `json:"projectImage,omitempty"`
	Layout *Layout `json:"layout,omitempty"`
}

// NewProjectImageDetails instantiates a new ProjectImageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectImageDetails() *ProjectImageDetails {
	this := ProjectImageDetails{}
	return &this
}

// NewProjectImageDetailsWithDefaults instantiates a new ProjectImageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectImageDetailsWithDefaults() *ProjectImageDetails {
	this := ProjectImageDetails{}
	return &this
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *ProjectImageDetails) GetAudit() Audit {
	if o == nil || IsNil(o.Audit) {
		var ret Audit
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectImageDetails) GetAuditOk() (*Audit, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *ProjectImageDetails) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given Audit and assigns it to the Audit field.
func (o *ProjectImageDetails) SetAudit(v Audit) {
	o.Audit = &v
}

// GetProjectImage returns the ProjectImage field value if set, zero value otherwise.
func (o *ProjectImageDetails) GetProjectImage() ProjectImage {
	if o == nil || IsNil(o.ProjectImage) {
		var ret ProjectImage
		return ret
	}
	return *o.ProjectImage
}

// GetProjectImageOk returns a tuple with the ProjectImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectImageDetails) GetProjectImageOk() (*ProjectImage, bool) {
	if o == nil || IsNil(o.ProjectImage) {
		return nil, false
	}
	return o.ProjectImage, true
}

// HasProjectImage returns a boolean if a field has been set.
func (o *ProjectImageDetails) HasProjectImage() bool {
	if o != nil && !IsNil(o.ProjectImage) {
		return true
	}

	return false
}

// SetProjectImage gets a reference to the given ProjectImage and assigns it to the ProjectImage field.
func (o *ProjectImageDetails) SetProjectImage(v ProjectImage) {
	o.ProjectImage = &v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *ProjectImageDetails) GetLayout() Layout {
	if o == nil || IsNil(o.Layout) {
		var ret Layout
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectImageDetails) GetLayoutOk() (*Layout, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *ProjectImageDetails) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given Layout and assigns it to the Layout field.
func (o *ProjectImageDetails) SetLayout(v Layout) {
	o.Layout = &v
}

func (o ProjectImageDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectImageDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	if !IsNil(o.ProjectImage) {
		toSerialize["projectImage"] = o.ProjectImage
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	return toSerialize, nil
}

type NullableProjectImageDetails struct {
	value *ProjectImageDetails
	isSet bool
}

func (v NullableProjectImageDetails) Get() *ProjectImageDetails {
	return v.value
}

func (v *NullableProjectImageDetails) Set(val *ProjectImageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectImageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectImageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectImageDetails(val *ProjectImageDetails) *NullableProjectImageDetails {
	return &NullableProjectImageDetails{value: val, isSet: true}
}

func (v NullableProjectImageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectImageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


