/*
YASM (Yet Another Skill Management) API

This is an example of using OAuth2 Implicit Flow in a specification to describe security to your API.

API version: 1.15.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the PersonIndustryFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonIndustryFilter{}

// PersonIndustryFilter struct for PersonIndustryFilter
type PersonIndustryFilter struct {
	Id string `json:"id"`
	ObjectType *string `json:"objectType,omitempty"`
	ActiveProjects *bool `json:"activeProjects,omitempty"`
	AmountOfProjects *MinMax `json:"amountOfProjects,omitempty"`
	ExperienceInMonth *MinMax `json:"experienceInMonth,omitempty"`
}

// NewPersonIndustryFilter instantiates a new PersonIndustryFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonIndustryFilter(id string) *PersonIndustryFilter {
	this := PersonIndustryFilter{}
	this.Id = id
	return &this
}

// NewPersonIndustryFilterWithDefaults instantiates a new PersonIndustryFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonIndustryFilterWithDefaults() *PersonIndustryFilter {
	this := PersonIndustryFilter{}
	return &this
}

// GetId returns the Id field value
func (o *PersonIndustryFilter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PersonIndustryFilter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PersonIndustryFilter) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *PersonIndustryFilter) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonIndustryFilter) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *PersonIndustryFilter) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *PersonIndustryFilter) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetActiveProjects returns the ActiveProjects field value if set, zero value otherwise.
func (o *PersonIndustryFilter) GetActiveProjects() bool {
	if o == nil || IsNil(o.ActiveProjects) {
		var ret bool
		return ret
	}
	return *o.ActiveProjects
}

// GetActiveProjectsOk returns a tuple with the ActiveProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonIndustryFilter) GetActiveProjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveProjects) {
		return nil, false
	}
	return o.ActiveProjects, true
}

// HasActiveProjects returns a boolean if a field has been set.
func (o *PersonIndustryFilter) HasActiveProjects() bool {
	if o != nil && !IsNil(o.ActiveProjects) {
		return true
	}

	return false
}

// SetActiveProjects gets a reference to the given bool and assigns it to the ActiveProjects field.
func (o *PersonIndustryFilter) SetActiveProjects(v bool) {
	o.ActiveProjects = &v
}

// GetAmountOfProjects returns the AmountOfProjects field value if set, zero value otherwise.
func (o *PersonIndustryFilter) GetAmountOfProjects() MinMax {
	if o == nil || IsNil(o.AmountOfProjects) {
		var ret MinMax
		return ret
	}
	return *o.AmountOfProjects
}

// GetAmountOfProjectsOk returns a tuple with the AmountOfProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonIndustryFilter) GetAmountOfProjectsOk() (*MinMax, bool) {
	if o == nil || IsNil(o.AmountOfProjects) {
		return nil, false
	}
	return o.AmountOfProjects, true
}

// HasAmountOfProjects returns a boolean if a field has been set.
func (o *PersonIndustryFilter) HasAmountOfProjects() bool {
	if o != nil && !IsNil(o.AmountOfProjects) {
		return true
	}

	return false
}

// SetAmountOfProjects gets a reference to the given MinMax and assigns it to the AmountOfProjects field.
func (o *PersonIndustryFilter) SetAmountOfProjects(v MinMax) {
	o.AmountOfProjects = &v
}

// GetExperienceInMonth returns the ExperienceInMonth field value if set, zero value otherwise.
func (o *PersonIndustryFilter) GetExperienceInMonth() MinMax {
	if o == nil || IsNil(o.ExperienceInMonth) {
		var ret MinMax
		return ret
	}
	return *o.ExperienceInMonth
}

// GetExperienceInMonthOk returns a tuple with the ExperienceInMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonIndustryFilter) GetExperienceInMonthOk() (*MinMax, bool) {
	if o == nil || IsNil(o.ExperienceInMonth) {
		return nil, false
	}
	return o.ExperienceInMonth, true
}

// HasExperienceInMonth returns a boolean if a field has been set.
func (o *PersonIndustryFilter) HasExperienceInMonth() bool {
	if o != nil && !IsNil(o.ExperienceInMonth) {
		return true
	}

	return false
}

// SetExperienceInMonth gets a reference to the given MinMax and assigns it to the ExperienceInMonth field.
func (o *PersonIndustryFilter) SetExperienceInMonth(v MinMax) {
	o.ExperienceInMonth = &v
}

func (o PersonIndustryFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonIndustryFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.ActiveProjects) {
		toSerialize["activeProjects"] = o.ActiveProjects
	}
	if !IsNil(o.AmountOfProjects) {
		toSerialize["amountOfProjects"] = o.AmountOfProjects
	}
	if !IsNil(o.ExperienceInMonth) {
		toSerialize["experienceInMonth"] = o.ExperienceInMonth
	}
	return toSerialize, nil
}

type NullablePersonIndustryFilter struct {
	value *PersonIndustryFilter
	isSet bool
}

func (v NullablePersonIndustryFilter) Get() *PersonIndustryFilter {
	return v.value
}

func (v *NullablePersonIndustryFilter) Set(val *PersonIndustryFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonIndustryFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonIndustryFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonIndustryFilter(val *PersonIndustryFilter) *NullablePersonIndustryFilter {
	return &NullablePersonIndustryFilter{value: val, isSet: true}
}

func (v NullablePersonIndustryFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonIndustryFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


